#include <Servo.h>

// Definindo os pinos do sensor ultrassônico
const int trigPin = 11;
const int echoPin = 10;
const int buzzerPin = 13;

// Variáveis para duração e distância
long duration;
int distance;

// Criação do objeto servo
Servo myServo;

// Variáveis para controle do buzzer usando `millis`
unsigned long previousMillis = 0;
const long interval = 1000; // Intervalo para o buzzer (1 segundo)
bool buzzerOn = false; // Indica se o buzzer está tocando

void setup() {
  pinMode(trigPin, OUTPUT); // Define o trigPin como Saída
  pinMode(echoPin, INPUT);  // Define o echoPin como Entrada
  pinMode(buzzerPin, OUTPUT); 
  Serial.begin(9600);
  myServo.attach(12); // Define o pino do servo motor
}

void loop() {
  // Gira o servo de 15 a 165 graus
  for (int i = 15; i <= 165; i++) {
    myServo.write(i);
    delay(30);
    distance = calculateDistance(); // Calcula a distância para cada ângulo
    Serial.print(i);
    Serial.print(",");
    Serial.print(distance);
    Serial.print(".");
  }

  // Gira o servo de 165 a 15 graus
  for (int i = 165; i > 15; i--) {
    myServo.write(i);
    delay(30);
    distance = calculateDistance();
    Serial.print(i);
    Serial.print(",");
    Serial.print(distance);
    Serial.print(".");

    controlBuzzer(distance); // Controla o buzzer com base na distância
  }
}

// Função para calcular a distância usando o sensor ultrassônico
int calculateDistance() {
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  
  duration = pulseIn(echoPin, HIGH); // Lê o tempo do pulso
  distance = duration * 0.034 / 2;   // Converte para distância em cm
  return distance;
}

// Função para controlar o buzzer de forma não bloqueante
void controlBuzzer(int distance) {
  unsigned long currentMillis = millis();

  if (distance > 0 && distance <= 200) {
    if (currentMillis - previousMillis >= interval) { // Verifica o intervalo de tempo
      previousMillis = currentMillis;

      // Alterna o estado do buzzer
      buzzerOn = !buzzerOn;
      if (buzzerOn) {
        int frequency = map(distance, 0, 200, 2500, 100); // Mapeia a distância para a frequência
        tone(buzzerPin, frequency);
      } else {
        noTone(buzzerPin);
      }
    }
  } else {
    noTone(buzzerPin); // Desativa o buzzer fora do alcance
  }
}
